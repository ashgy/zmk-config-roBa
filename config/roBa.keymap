#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <8 9>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <0 1>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W         &kp E         &kp R                      &kp T                                                    &kp Y            &kp U  &lt 5 I    &kp O    &kp P
&mt LEFT_CONTROL A  &kp S         &kp D         &kp F                      &kp G        &kp LS(LG(S))                &kp SEMI       &kp H            &kp J  &kp K      &kp L    &kp ENTER
&mt LEFT_CONTROL Z  &kp X         &kp C         &kp V                      &kp B        &kp COLON                    &kp SEMICOLON  &kp N            &kp M  &kp COMMA  &kp DOT  &kp MINUS
&kp LEFT_SHIFT      &kp LEFT_WIN  &kp LEFT_WIN  &lt_to_layer_0 1 LEFT_ALT  &lt 3 SPACE  &lt_to_layer_0 2 DELETE      &kp ESCAPE     &lt 1 BACKSPACE                             &kp SLASH
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp F1          &kp F2        &kp F3        &kp F4        &kp F5                      &kp F6        &kp F7    &kp F8     &kp F9        &kp EQUAL
&kp NUMBER_1    &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5  &trans      &trans  &kp NUMBER_6  &kp N7    &kp N8     &kp N9        &kp N0
&kp LEFT_SHIFT  &trans        &trans        &trans        &trans  &trans      &trans  &kp TILDE     &kp PLUS  &kp MINUS  &kp ASTERISK  &kp SLASH
&trans          &trans        &trans        &trans        &trans  &trans      &trans  &trans                                           &kp F12
            >;
        };

        NUM {
            bindings = <
&kp EXCLAMATION             &kp AT_SIGN      &kp HASH         &kp DOLLAR       &kp PERCENT                                                &kp AMPERSAND     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LESS_THAN    &kp GREATER_THAN
&kp CARET                   &kp AMPERSAND    &kp ASTERISK     &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp EXCLAMATION   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOLLAR       &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &trans          &kp LEFT_BRACKET  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp RIGHT_BRACE  &kp BACKSLASH
&trans                      &trans           &trans           &trans           &trans        &trans                       &trans          &trans                                                                          &kp QUESTION
            >;
        };

        ARROW {
            bindings = <
&kp F2            &kp LC(TAB)             &kp UP_ARROW    &kp LC(LS(TAB))          &trans                           &trans    &kp PAGE_UP     &kp UP_ARROW    &kp PAGE_DOWN    &trans
&kp LEFT_SHIFT    &kp RIGHT_ALT           &kp DOWN_ARROW  &kp TAB                  &kp LS(TAB)  &trans      &trans  &kp HOME  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END
&kp LEFT_CONTROL  &kp LG(LS(LEFT_ARROW))  &kp LEFT_WIN    &kp LG(LS(RIGHT_ARROW))  &trans       &trans      &trans  &trans    &trans          &trans          &trans           &trans
&trans            &trans                  &trans          &trans                   &trans       &trans      &trans  &trans                                                     &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans              &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp LA(LEFT_ARROW)  &mkp MB1  &mkp MB3  &mkp MB2  &kp LA(RIGHT_ARROW)
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans              &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                            &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans                   &trans         &trans         &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &kp LANG_ZENKAKUHANKAKU  &kp LA(TILDE)  &kp LC(SPACE)  &trans  &trans      &trans       &out OUT_BLE  &out OUT_USB  &out OUT_TOG  &trans        &trans
&trans  &kp NUMBER_1             &kp NUMBER_2   &kp NUMBER_3   &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans                   &trans         &trans         &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
